{"version":3,"sources":["components/Maintab/Maintab.module.css","components/CountriesStats/CountriesStats.module.css","screens/CovidPedia/CovidPedia.module.css","components/navbar/Navbar.module.css","components/Card/Card.module.css","components/navbar/Navbar.js","components/Card/Card.js","components/Maintab/Maintab.js","components/CountriesStats/CountriesStats.js","screens/CovidPedia/CovidPedia.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","classes","brandName","Card","props","Classes","container","children","Maintab","CardContainer","Heading","globalData","NewConfirmed","NewDeaths","NewRecovered","TotalConfirmed","TotalRecovered","MiddleLables","labelStyling","IndiaData","CountriesStats","countryData","map","data","index","key","CountryCode","IndividualCard","CountryName","Country","CovidPedia","state","CompleteData","fetchingDataComplete","componentDidMount","fetchData","fetch","then","response","json","dataset","console","log","new_data","setState","findIndia","i","Countries","length","this","Global","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3819958a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Maintab_container__9gloX\",\"CardContainer\":\"Maintab_CardContainer__1VSyP\",\"Heading\":\"Maintab_Heading__ZxSkS\",\"MiddleLables\":\"Maintab_MiddleLables__30JSI\",\"labelStyling\":\"Maintab_labelStyling__1VdDn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountriesStats_container__8OyPG\",\"CardContainer\":\"CountriesStats_CardContainer__24EKq\",\"IndividualCard\":\"CountriesStats_IndividualCard__3lzv7\",\"CountryName\":\"CountriesStats_CountryName__2d9It\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CovidPedia_container__1W8k8\",\"Maintab\":\"CovidPedia_Maintab__1SPUj\",\"CountriesStats\":\"CovidPedia_CountriesStats__2J7t5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__3z-ht\",\"brandName\":\"Navbar_brandName__1p98M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Card_container__1kHud\"};","import React from 'react';\r\nimport classes from './Navbar.module.css';\r\n\r\nconst Navbar = () => {\r\n    return(\r\n        <div className={classes.Navbar}>\r\n           <div className={classes.brandName}>\r\n            Covid-Pidea\r\n           </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport Classes from './Card.module.css';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className={Classes.container}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"../Card/Card\";\r\n\r\nimport Classes from \"./Maintab.module.css\";\r\n\r\nconst Maintab = (props) => {\r\n  \r\n  return (\r\n    <div className={Classes.container}>\r\n      <div className={Classes.CardContainer}>\r\n        <Card>\r\n        <p className={Classes.Heading}>global</p>\r\n      <p>NewConfirmed : {props.globalData.NewConfirmed}</p>\r\n      <p>NewDeaths : {props.globalData.NewDeaths}</p>\r\n      <p>NewRecovered   : {props.globalData.NewRecovered}</p>\r\n      <p>TotalConfirmed : {props.globalData.TotalConfirmed}</p>\r\n      <p>TotalRecovered : {props.globalData.TotalRecovered }</p>\r\n        </Card>\r\n        \r\n        <div className={Classes.MiddleLables}>\r\n          <div className={Classes.labelStyling}>←  Cases globally</div>\r\n          <div className={Classes.labelStyling}> Cases in India →</div>\r\n        </div>\r\n\r\n        <Card>\r\n        <p className={Classes.Heading}>India</p>\r\n      <p>NewConfirmed : {props.IndiaData.NewConfirmed}</p>\r\n      <p>NewDeaths : {props.IndiaData.NewDeaths}</p>\r\n      <p>NewRecovered   : {props.IndiaData.NewRecovered}</p>\r\n      <p>TotalConfirmed : {props.IndiaData.TotalConfirmed}</p>\r\n      <p>TotalRecovered : {props.IndiaData.TotalRecovered }</p>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Maintab;\r\n","import React from \"react\";\r\nimport Card from \"../Card/Card\";\r\n\r\nimport Classes from \"./CountriesStats.module.css\";\r\n\r\nconst CountriesStats = (props) => {\r\n\r\n  const CountryStatsReder = () => {\r\n    let count=0;\r\n    const new_cards = props.countryData.map((data, index) => {\r\n      count =count +1;\r\n      return (\r\n        <div key={data.CountryCode} className={Classes.IndividualCard}>\r\n          <Card>\r\n      <p className={Classes.CountryName}>{data.Country}</p>\r\n      <p>NewConfirmed : {data.NewConfirmed}</p>\r\n      <p>NewDeaths : {data.NewDeaths}</p>\r\n      <p>NewRecovered   : {data.NewRecovered}</p>\r\n      <p>TotalConfirmed : {data.TotalConfirmed}</p>\r\n      <p>TotalRecovered : {data.TotalRecovered }</p>\r\n\r\n          </Card>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return new_cards;\r\n  };\r\n\r\n  const checkIfCountryDataLoaded = () => {\r\n    if (props.countryData) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={Classes.container}>\r\n      <div className={Classes.CardContainer}>\r\n        {checkIfCountryDataLoaded() ? CountryStatsReder() : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountriesStats;\r\n","import React, { Component } from \"react\";\r\nimport Maintab from \"../../components/Maintab/Maintab\";\r\nimport CountriesStats from \"../../components/CountriesStats/CountriesStats\";\r\n\r\nimport Classes from \"./CovidPedia.module.css\";\r\n\r\nclass CovidPedia extends Component {\r\n  state = {\r\n    CompleteData: null,\r\n    fetchingDataComplete: false,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.fetchData();\r\n  };\r\n\r\n  fetchData = () => {\r\n    fetch(\"https://api.covid19api.com/summary\")\r\n      .then((response) => response.json())\r\n      .then((dataset) => {\r\n        console.log(dataset);\r\n        const new_data = { ...dataset};\r\n        this.setState({ CompleteData: new_data, fetchingDataComplete: true });\r\n      });\r\n  };\r\n\r\n  findIndia = () => {\r\n    for(let i=0;i<(this.state.CompleteData.Countries).length;i++){\r\n      if(this.state.CompleteData.Countries[i].Country===\"India\"){\r\n        return this.state.CompleteData.Countries[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(\"rendering covid screen\");\r\n    return (\r\n      <div className={Classes.container}>\r\n\r\n        <div className={Classes.Maintab}>\r\n          {(this.state.CompleteData)\r\n            ?<Maintab globalData={this.state.CompleteData.Global} IndiaData={this.findIndia()}/>\r\n            :null}\r\n        </div>\r\n\r\n        <div className={Classes.CountriesStats}>\r\n          {(this.state.CompleteData)?\r\n          <CountriesStats countryData={this.state.CompleteData.Countries}/>\r\n          :null}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CovidPedia;\r\n","import React from \"react\";\nimport Navbar from \"./components/navbar/Navbar\"\nimport CovidPedia from \"./screens/CovidPedia/CovidPedia\";\n\n//import Classes from \"./App.module.css\";\n\nconst App = () => {\n  return (\n    <>\n      <Navbar />\n      <CovidPedia />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}